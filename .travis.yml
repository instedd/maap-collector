matrix:
  include:
    - os: osx
      language: node_js
      node_js:
        - 10.15.3
      env:
        - ELECTRON_CACHE=$HOME/.cache/electron
        - ELECTRON_BUILDER_CACHE=$HOME/.cache/electron-builder
      addons:
        homebrew:
          packages:
          - sqlite
          - sqlcipher

    - os: windows
      language: node_js
      node_js:
        - 10.15.3
      env:
        - YARN_GPG=no
        - TEMPDIR=TEMPDIR=$LOCALAPPDATA\\Temp
        - ELECTRON_CACHE=$HOME/.cache/electron
        - ELECTRON_BUILDER_CACHE=$HOME/.cache/electron-builder

before_cache:
  - rm -rf $HOME/.cache/electron-builder/wine

cache:
  yarn: true
  directories:
    - node_modules
    - $(npm config get prefix)/lib/node_modules
    - flow-typed
    - $HOME/.cache/electron
    - $HOME/.cache/electron-builder

before_install:
  - |
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      export NODEPATH=$(where.exe node.exe) \
      export PROJECTDIR=$(pwd) \
      export YARNCACHE=$(yarn cache dir) \
      export TEMPDIR=$LOCALAPPDATA\\Temp \
      export YARN_GPG=no \
      powershell Add-MpPreference -ExclusionProcess ${NODEPATH} \
      powershell Add-MpPreference -ExclusionPath ${YARNCACHE} \ 
      powershell Add-MpPreference -ExclusionPath ${PROJECTDIR} \
      powershell Add-MpPreference -ExclusionPath ${TEMPDIR} ] \
      echo "DisableArchiveScanning..." \
      powershell Start-Process -PassThru -Wait PowerShell -ArgumentList "'-Command Set-MpPreference -DisableArchiveScanning \$true'" \
      echo "DisableBehaviorMonitoring..." \
      powershell Start-Process -PassThru -Wait PowerShell -ArgumentList "'-Command Set-MpPreference -DisableBehaviorMonitoring \$true'" \
      echo "DisableRealtimeMonitoring..." \
      powershell Start-Process -PassThru -Wait PowerShell -ArgumentList "'-Command Set-MpPreference -DisableRealtimeMonitoring \$true'" \
    else
      :
    fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then export CXX="g++-8"; fi
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then choco install sqlite --params "/NoTools"; fi
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then yarn config delete proxy; fi
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then npm config rm proxy; fi
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then npm config rm https-proxy; fi

install:
  - yarn install --ignore-engines  --network-timeout 1000000
  # On Linux, initialize "virtual display". See before_script
  - |
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      /sbin/start-stop-daemon \
      --start \
      --quiet \
      --pidfile /tmp/custom_xvfb_99.pid \
      --make-pidfile \
      --background \
      --exec /usr/bin/Xvfb \
      -- :99 -ac -screen 0 1280x1024x16
    else
      :
    fi

before_script:
  # On Linux, create a "virtual display". This allows browsers to work properly
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then export DISPLAY=:99.0; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sh -e /etc/init.d/xvfb start; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sleep 3; fi

script:
  - yarn postinstall
  - yarn lint
  # # HACK: Temporarily ignore `yarn flow` on windows
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then yarn flow; fi
  - yarn build-e2e
  - yarn test-e2e
notifications:
  email: false